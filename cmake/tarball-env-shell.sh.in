#!/usr/bin/env bash
#
# Icetray (tarball) environment script.
#
# THIS FILE WAS AUTOGENERATED. ANY CHANGES YOU MAKE HERE WILL BE
# LOST. IF YOU FIND YOURSELF NEEDING TO CHANGE THINGS HERE SEE
#
# http://wiki.icecube.wisc.edu/index.php/Shell_Configuration_Tips
#
# Icetray environment script for tarballs.  Sets everything relative
# to the directory that this shell runs in.  Different than the env-shell.sh
# which knows about values of I3_BUILD, etc.
#

if [[ "$1" = "help" ]]
    then
    echo "Usage: $0 [SHELL]"
    echo "Spawn a new shell with an Icetray environment loaded"
    echo ""
    echo "SHELL can specified with or without a full path.  If SHELL"
    echo "is omitted the login shell is used by default."
    echo "Examples:"
    echo "   $0"
    echo "   $0 bash"
    echo "   $0 /path/to/script.py"
    echo ""
    echo "To exit the Icetray environment simply exit the new shell."
    echo ""
    exit 1
fi

if [[ -z "$1" ]]
    then # user did not specify a shell
    NEW_SHELL=$SHELL
    # only exit if no shell specified on command line *and* env already loaded
    if [[ -n "$I3_SHELL" ]]
        then
        echo "****************************************************************"
        echo "You are currently in a shell with an Icetray environment loaded."
        echo "Please exit the current shell and re-run $0 from a clean shell."
        echo "****************************************************************"
        echo "Environment not (re)loaded."
        exit 2
    fi
else
    NEW_SHELL=$1
    shift
    ARGV="$@"
fi

_I3_SHELL=$NEW_SHELL

#
# Determine directory that this shell lives in.
#
pushd `dirname $0` >/dev/null
BASEDIR=`pwd`
popd >/dev/null

_I3_SRC=$BASEDIR
_I3_BUILD=$BASEDIR
_I3_TESTDATA=@I3_TESTDATA@
_I3_PRODDATA=@I3_PRODDATA@

# Check for I3_BUILD mismatch
if [ -n "$I3_BUILD" -a "$I3_BUILD" != "$_I3_BUILD" ]
then
    echo "****************************************************************"
    echo "I3_BUILD CHANGED"
    echo "It appears that you are attempting to load an icetray environment different"
    echo "than the one already loaded"
    echo "          This I3_BUILD=$_I3_BUILD"
    echo "Already loaded I3_BUILD=$I3_BUILD"
    echo "****************************************************************"
    echo "Environment not (re)loaded."
    exit 2
fi

_ROOTSYS=$BASEDIR/cernroot

_LD_LIBRARY_PATH=$BASEDIR/lib:$_ROOTSYS/lib:$BASEDIR/lib/tools
_DYLD_LIBRARY_PATH=$BASEDIR/lib:$_ROOTSYS/lib:$BASEDIR/lib/tools

## extra CVMFS library paths
_USE_CVMFS=@USE_CVMFS@
if [[ "${_USE_CVMFS}" == "TRUE" ]]; then
if [[ "$SROOTBASE" != "@CVMFS_SROOTBASE@" ]]; then
        eval $(@CVMFS_SROOTBASE@/setup.sh)
fi
_GSL_FOUND=@GSL_FOUND@
if [[ "${_GSL_FOUND}" == "TRUE" ]]; then
     if [[ "@GSL_VERSION@" ]]; then
        GSL_LIBRARY_DIR=`gsl-config_@GSL_VERSION@ --prefix`/lib/gsl-@GSL_VERSION@
    else
        GSL_LIBRARY_DIR=`gsl-config --prefix`/lib/gsl
    fi
    if [[ -d ${GSL_LIBRARY_DIR} ]]; then
        _LD_LIBRARY_PATH=${_LD_LIBRARY_PATH}:${GSL_LIBRARY_DIR}
        _DYLD_LIBRARY_PATH=${_DYLD_LIBRARY_PATH}:${GSL_LIBRARY_DIR}
    fi
fi
_GEANT4_FOUND=@GEANT4_FOUND@
if [[ "${_GEANT4_FOUND}" == "TRUE" ]]; then
    GEANT4_LIBRARY_DIR=@GEANT4_LIB_DIR@
    if [[ -d ${GEANT4_LIBRARY_DIR} ]]; then
        _LD_LIBRARY_PATH=${_LD_LIBRARY_PATH}:${GEANT4_LIBRARY_DIR}
        _DYLD_LIBRARY_PATH=${_DYLD_LIBRARY_PATH}:${GEANT4_LIBRARY_DIR}
    fi
fi
fi

_LD_LIBRARY_PATH=${_LD_LIBRARY_PATH}:$LD_LIBRARY_PATH
_DYLD_LIBRARY_PATH=${_DYLD_LIBRARY_PATH}:$DYLD_LIBRARY_PATH
case "@ROOTSYS@" in
    */py3-v4.3*)
        _PYTHONPATH=@CMAKE_BINARY_DIR@/lib:${_ROOTSYS}/lib/root:$PYTHONPATH
        ;;
    *)
        _PYTHONPATH=@CMAKE_BINARY_DIR@/lib:${_ROOTSYS}/lib:$PYTHONPATH
        ;;
esac
_PATH=$BASEDIR/bin:$PATH

_HDF5_USE_FILE_LOCKING=${HDF5_USE_FILE_LOCKING:-FALSE}

TOPBAR="************************************************************************"
WIDTH=`echo "$TOPBAR" | wc -c`

WIDTH=$(( $WIDTH-2 ))

function printctr()
{
    LEN=`echo "$*" | wc -c`
    LOFFSET=$(( ($WIDTH-$LEN)/2 ))
    ROFFSET=$(( $WIDTH-$LOFFSET-$LEN ))

    FORMAT="*%${LOFFSET}s%s%${ROFFSET}s*\n"
    printf $FORMAT " " "$*" " "
}

if [ -z "$ARGV" ]
    then
    printf "$TOPBAR\n"
    printctr ""
    printctr "W E L C O M E  to  I C E T R A Y"
    printctr ""
    printctr "Version @META_PROJECT@     git:@GIT_SHORT_REVISION@"
    printctr ""
    printctr "You are welcome to visit our Web site"
    printctr "http://icecube.umd.edu"
    printctr ""
    printf "$TOPBAR\n"
    printf "\n"
    printf "Icetray environment has:\n"
    printf "   I3_SRC       = %s\n" $_I3_SRC
    printf "   I3_BUILD     = %s\n" $_I3_BUILD
    [ -d "$_I3_TESTDATA" ] && printf "   I3_TESTDATA  = %s\n" $_I3_TESTDATA \
                           || printf "   I3_TESTDATA should be set to an existing directory path\n" \
                                     "   (and 'make rsync' may need to be run) if you wish to run tests."
    [ -d "$_I3_PRODDATA" ] && printf "   I3_PRODDATA  = %s\n" $_I3_PRODDATA \
                           || printf "   I3_PRODDATA should be set to an existing directory path\n" \
                                     "   (and 'make rsync-prod-data' may need to be run) if you wish to use 'production data'."
    echo   "   Python       =" @PYTHON_VERSION@
fi

if [[ -z "$I3_SHELL" ]] # a clean, first invocation
    then

    # GEANT4_ENV_VARS pulls in GEANT4 variables,
    # generated by cmake/make_geant4_env.py

    PATH=$_PATH \
    LD_LIBRARY_PATH=$_LD_LIBRARY_PATH \
    DYLD_LIBRARY_PATH=$_DYLD_LIBRARY_PATH \
    PYTHONPATH=$_PYTHONPATH \
    I3_PLATFORM="" \
    I3_SRC=$_I3_SRC \
    I3_BUILD=$_I3_BUILD \
    I3_TESTDATA=$_I3_TESTDATA \
    I3_PRODDATA=$_I3_PRODDATA \
    ROOTSYS=$_ROOTSYS \
    I3_SHELL=$_I3_SHELL \
    HDF5_USE_FILE_LOCKING=$_HDF5_USE_FILE_LOCKING \
    @GEANT4_ENV_VARS@ \
    $NEW_SHELL "$@"

else  # not clean, use previous environment
    $NEW_SHELL "$@"
fi

STATUS=$?

if [ -z "$ARGV" ]
then
    echo "Exited Icetray Environment."
fi
exit $STATUS
