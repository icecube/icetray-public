#
#  Copyright (C) 2008   Troy D. Straszheim  <troy@icecube.umd.edu>
#  and the IceCube Collaboration <http://www.icecube.wisc.edu>
#  
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
#  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.
#  
#  SPDX-License-Identifier: BSD-2-Clause
#  
#  along with this program.  If not, see <http://www.gnu.org/licenses/>
#  
"""
Toplevel container for icecube projects
"""

import platform,sys, warnings

# Suppress boost::python warning triggered by multiple registrations. It's fine.
import warnings
warnings.filterwarnings("ignore", ".*already registered; second conversion method ignored.", RuntimeWarning)

def extract_numeric_value(version):
    '''
    Given a string, e.g. '15+' or '14b' or even 'foo42eight'
    just extract the numeric part.

    This is important for comparing cmake python versions 2.7.15
    with the version that python reports 2.7.15, for example.

    Note this will also convert '14b2' to '142', but we can't really
    account for all the pathological patch version numbers that python
    might attempt in the future.
    ''' 
    try:
        return int(version)
    except ValueError:
        return int(''.join([n for n in version
                            if n in ['0','1','2','3','4','5','6','7','8','9']]))

PYTHON_VERSION = "@PYTHON_VERSION@"
if PYTHON_VERSION != platform.python_version():
    cast_version = '.'.join([str(extract_numeric_value(v)) for v in platform.python_version_tuple()])    
    if PYTHON_VERSION != cast_version:
        warnings.warn("IceTray was compiled with Python version {} but is currently being run with {}"
                      .format(PYTHON_VERSION,platform.python_version()))
                  
if platform.system().startswith('freebsd'):
	# C++ modules are extremely fragile when loaded with RTLD_LOCAL,
	# which is what Python uses on FreeBSD by default, and maybe other
	# systems. Convince it to use RTLD_GLOBAL.

	# See thread by Abrahams et al:
	# http://mail.python.org/pipermail/python-dev/2002-May/024074.html
	sys.setdlopenflags(0x102)


def load_pybindings(name, path):
    """
    Merges python bindings from shared library 'name' into module 'name'.
    Use when you have a directory structure::

      lib/
         foo.so
         foo/
           __init__.py
           something.py

    Here, inside ``foo/__init__.py`` call ``load_pybindings(__name__, __path__)``

    this assumes that the first entry in list ``__path__`` is where
    you want the wrapped classes to merge to.

    """

    import importlib, sys
    thismod = sys.modules[name]
    m = importlib.import_module('._'+name.split('.')[-1],'icecube')

    for (k,v) in m.__dict__.items():
        if not k.startswith("_"):
            thismod.__dict__[k] = v

