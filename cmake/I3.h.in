/**
 *  $Id$
 *
 *  Copyright (C) 2004, 2005, 2006, 2007
 *  Troy D. Straszheim  <troy@icecube.umd.edu>
 *  and the IceCube Collaboration <http://www.icecube.wisc.edu>
 *
 *  This file is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 */

#ifndef ICETRAY_I3_H_INCLUDED
#define ICETRAY_I3_H_INCLUDED

// gives us the tasty bits like INT32_MAX
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS
#endif
#ifndef __STDC_FORMAT_MACROS
#define __STDC_FORMAT_MACROS
#endif

#ifdef __cplusplus

#ifdef APPLE
#ifndef __CINT__
#  include <Python.h>
#endif
#endif

// This headedr fixes a boost issue and a boost+cint issue under ICC.
// It's probably been long fixed. We're not really using ICC anywhere,
// so let's disable it until we get some complaints. There's more work
// I need to do re: icc anyway.

#if 0
#include <I3/intel_compatibility.h>
#endif

//
//  Preprocessor def is set if we're building python bindings.
//
#ifdef I3_PYBINDINGS_MODULE

// this has to match the type of libs you link to.  This should
// probably be configured by the boost tool and put on the command
// line instead of done here.
#include <boost/version.hpp>

// We used to disable threads throughout everything.
#if BOOST_VERSION < 103600
#define BOOST_DISABLE_THREADS
#endif

#define BOOST_PYTHON_DYNAMIC_LIB

#include <boost/python.hpp>
#include <boost/python/suite/indexing/indexing_suite.hpp>
#include <boost/python/suite/indexing/map_indexing_suite.hpp>
#include <boost/python/suite/indexing/vector_indexing_suite.hpp>

#include "container_conversions.h"
using scitbx::boost_python::container_conversions::from_python_sequence;
using scitbx::boost_python::container_conversions::to_tuple;
using scitbx::boost_python::container_conversions::variable_capacity_policy;

#endif // I3_PYBINDINGS_MODULE


// e.g. gcc 3.4.6 -> 30406
#define GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)

#if GCC_VERSION < 30400
#error gcc < 3.4 is not supported.  Please use gcc 3.4.x or newer.
#endif

#ifdef __APPLE_CC__
// another workaround for rootcint dumbness
#  ifndef __CINT__
// HACK: included early here to prevent typedef collisions with socklen_t
#    include <sys/socket.h>
#  endif
#  define _GLIBCPP_USE_C99 1
#  define _GLIBCXX_USE_C99 1
#else
#  define HAVE_STRNLEN 1
#endif

// this is actually a seatbuilt protecting users from the subtle
// differences between std::isnan() and C's isnan()
#include <cmath> 
#include <math.h> 
using std::isnan; 

#define BOOST_NO_WREGEX

#ifdef NDEBUG
#define BOOST_DISABLE_ASSERTS
#endif

#include <boost/version.hpp>

#include <boost/shared_ptr.hpp>
using boost::shared_ptr;
using boost::dynamic_pointer_cast;

// workaround for braindead rootcint.  doesn't recognize the using
// boost::shared_ptr.  I can just see this popping up to cause us
// unspeakable aggravation in the future...

#ifdef __CINT__
template <typename T>
struct shared_ptr : boost::shared_ptr<T> { };

#ifdef __FreeBSD__
class __builtin_va_list;
#endif

#endif /* __CINT__ */

#ifdef I3_PYBINDINGS_MODULE 
#  include <pybindings.hpp> 
#endif 

#ifdef I3_ONLINE
#  include <boost/config.hpp>
#  if !defined(__GNUC__)
#    error "Do not use other than GNU C Compiler - it supports thread-safe initialization of local statics"
#  elif !defined(BOOST_HAS_THREADS)
#    error "Do not use boost without threading support"
#  elif defined(BOOST_DISABLE_THREADS)
#    error "Do not disable boost threading support"
#  elif defined(BOOST_SP_DISABLE_THREADS)
#    error "Do not switch boost to ordinary non-atomic reference count updates"
#  endif
#endif

#endif //ifdef __cplusplus
#endif //ifndef ICETRAY_I3_H_INCLUDED
