#!/bin/sh

# Compilation configuration script
# This script generates the necessary compiler flags to link against icetray projects
#
# THIS FILE WAS AUTOGENERATED FROM @I3_SRC@/cmake/icetray-config.in

SRC_DIR=@I3_SRC@
BUILD_DIR=@I3_BUILD@
CMAKECACHE=$BUILD_DIR/CMakeCache.txt

COMPILE_FLAGS=0
LINK_FLAGS=0
PROJECTS=""
OUTPUT_FLAGS=""

#read arguments and figure out what to do
for arg
do
	if [ $arg = "-compile" -o $arg = "--cflags" ]; then
		COMPILE_FLAGS=1
	elif [ $arg = "-link" -o $arg = "--ldflags" ]; then
		LINK_FLAGS=1
	elif [ $arg = "-h" -o $arg = "-help" -o $arg = "--help" ]; then
		echo "Usage: icetray-config [-compile|--cflags] [-link|--ldflags] [project ...]"
		exit
	else
		if [ "$PROJECTS" = "" ]; then
			PROJECTS=$arg
		else
			PROJECTS="$PROJECTS $arg"
		fi
	fi
done

#if user specified nothing, assume he wants everything
if [ $COMPILE_FLAGS -eq 0 -a $LINK_FLAGS -eq 0 ]; then
	COMPILE_FLAGS=1
	LINK_FLAGS=1
fi

#a couple of globally necessary flags
if [ $COMPILE_FLAGS -eq 1 ]; then
	OUTPUT_FLAGS="$OUTPUT_FLAGS -include $BUILD_DIR/CMakeFiles/I3.h"
fi
if [ $LINK_FLAGS -eq 1 ]; then
	OUTPUT_FLAGS="$OUTPUT_FLAGS -L$BUILD_DIR/lib"
fi

#check that a required project actually exists and is being built
check_project() {
	#echo "checking project $1"
	safe_name=`echo $1 | tr -C 'A-Za-z_' '_'`
	checked=`eval echo "$"CHECKED_PROJECT_${safe_name}`
	if [ "$checked" = 1 ]; then
		#echo " aborting; already checked"
		return 0
	fi
	eval CHECKED_PROJECT_${safe_name}=1
	upper_project=`echo $1 | tr '[:lower:]' '[:upper:]'`
	buildflag=`grep -m 1 BUILD_${upper_project}:BOOL $CMAKECACHE`
	if [ "$buildflag" = "" ]; then 
		echo "Project $1 was not found"
		exit 1
	fi
	if [ `echo $buildflag | sed 's|^.*:BOOL=||'` = "OFF" ]; then
		echo "Project $1 is marked not to be built"
		exit 1
	fi
}

#stack infrastructure for recursive function calls
PROJECT_STACK=""
push_ps() {
	project=$1
	PROJECT_STACK="$PROJECT_STACK $1"
}
pop_ps() {
	PROJECT_STACK=`echo "$PROJECT_STACK" | sed 's|^\(.*\) [^ ]*$|\1|'`
	project=`echo "$PROJECT_STACK" | sed 's|^.* \([^ ]*\)$|\1|'`
}

#determine on which other projects a given project depends
get_project_dependencies() {
	push_ps $1
	#echo "getting dependencies of project $project"
	safe_name=`echo $project | tr -C 'A-Za-z_' '_'`
	got_deps=`eval echo "$"GOT_PROJECT_DEPS_${safe_name}`
	if [ "$got_deps" = 1 ]; then
		#echo " aborting; already done"
		pop_ps
		return 0
	fi
	eval GOT_PROJECT_DEPS_${safe_name}=1
	
	check_project $project
	
	projectlist=`grep -m 1 ${project}_PROJECT_DEPENDS:INTERNAL $CMAKECACHE | sed -e 's|;| |g' -e's|^.*INTERNAL=||'`
	for depproj in $projectlist; do
		get_project_dependencies $depproj
	done
	if [ "$ALL_PROJECTS" = "" ]; then
		ALL_PROJECTS=$project
	else
		ALL_PROJECTS="$ALL_PROJECTS $project"
	fi
	pop_ps
}

#figure out which other projects are dependencies of the ones the user specified
ALL_PROJECTS=""
for project in $PROJECTS; do
	get_project_dependencies $project
done

#echo "Topological list of all necessary projects: $ALL_PROJECTS"

#fetch the in-use build type
build_type=`grep -m 1 CMAKE_BUILD_TYPE:STRING $CMAKECACHE | sed -e's|^.*:STRING=||'`
#compute the correct filter for libraries
if [ $build_type = "Debug" ]; then
	#remove all libraries marked 'optimized', throw away any 'debug' or 'general' flags on others
	library_filter="-e s|optimized;[^;]*||g -e s|debug;||g -e s|general;||g"
else
	#remove all libraries marked 'debug', throw away any 'optimized' or 'general' flags on others
	library_filter="-e s|debug;[^;]*||g -e s|optimized;||g -e s|general;||g"
fi

#generate all necessary flags for each project
for project in $ALL_PROJECTS; do
	if [ $COMPILE_FLAGS -eq 1 ]; then
		#add flags for all of the include directories needed by this project
		incdirlist=`grep -m 1 ${project}_INCLUDE_DIRS:INTERNAL $CMAKECACHE | sed -e 's|;| |g' -e's|^.*:INTERNAL=||'`
		for incdir in $incdirlist; do
			OUTPUT_FLAGS="$OUTPUT_FLAGS -I$incdir"
		done
		#grab any other compilation flags for the project; not sure if this is needed
		proj_compile_flags=`grep -m 1 ${project}_COMPILE_FLAGS:INTERNAL $CMAKECACHE | sed -e 's|;| |g' -e's|^.*:INTERNAL=||'`
		if [ "$proj_compile_flags" ]; then
			OUTPUT_FLAGS="$OUTPUT_FLAGS $proj_compile_flags"
		fi
	fi
	if [ $LINK_FLAGS -eq 1 ]; then
		liblist=`grep -m 1 -m 1 ${project}_LIBRARY_DEPENDS:INTERNAL $CMAKECACHE | sed $library_filter -e 's|;| |g' -e's|^.*:INTERNAL=||'`
		for lib in $liblist; do
			OUTPUT_FLAGS="$OUTPUT_FLAGS `echo $lib | sed -E -e 's_^(.*)/lib(.*)\.(a|dylib|so)$_-L\1 -l\2_' -e 's_^(.*)/([^/]*)\.framework$_-F\1 -framework \2_'`"
		done
	fi

	if [ $COMPILE_FLAGS -eq 1 ]; then
		OUTPUT_FLAGS="$OUTPUT_FLAGS -I$SRC_DIR/$project/public"
	fi
	if [ $LINK_FLAGS -eq 1 ]; then
		OUTPUT_FLAGS="$OUTPUT_FLAGS -l$project"
	fi
done

#deduplicate
OUTPUT_FLAGS=`echo $OUTPUT_FLAGS | tr ' ' '\n' | perl -ne '$H{$_}++ or print'`
echo $OUTPUT_FLAGS 
