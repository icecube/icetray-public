Effective mailng-list communication
-----------------------------------

State your problem clearly.
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Avoid confusion or ambiguity.  What you write is what the person
answering your question will be working with.

Explain what happened, let us know how you tried to resolve or fix the
problem, so that we don't have to ask if you tried something.
Including what did not work will reduce the replies that repeat what
you already tried.  Be specific.

Try to phrase your question so someone will *not* have to ask: 

* What did it do instead of working?  
* What do you mean by working?
* How do you know it is not working?
* When did the problem start?
* Can you reduce this to a portion of code that fails?

Isolate the problem.
^^^^^^^^^^^^^^^^^^^^
The more you tell us up front, the easier it is for us to answer you
questions.

The fewer lines involved with the problem the easier it is to answer.
Don't include a 200 line script if you can isolate the problem to a
few lines and make a smaller example.

Some dreaded phrases that do not convey what the problem is and are
usually used without a clear statement of the problem and what was
actually wanted: "I am having trouble with this working", "This
doesn't work", "This gives me the wrong answer", "IceTray doesn't
work".

Please keep in mind that we are not mind-readers, so please post clear
questions.  Don't make us ask Who, When, Why, How, How Much, nor do we
want to have to ask you What does it do instead of work?  Failure to
post a clear question will almost certainly delay responses, and
require additional back and forth postings to clarify the question and
answers.

State the problem plain and simple and then give additional
information.  Include as appropriate: metaproject version, operating
system and version, compiler version (if dealing with compiler errors)
error messages (text only, no attachments), what was expected and what
happened instead.

Avoid authoritative tone when misdiagnosing a problem
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Don't lay blame at the foot of any particular component or module if
you aren't absolutely sure you are correct.  To do so will only create
confusion and breed antagonism.

Be very specific when reporting error messages.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Don't say "I get an error when I do this."  Post the exact text of the
error message, after that is what one would use to search Google.
Exactly what did you do to get the error?  Was it generated by root,
icetray, or python?  Do you know which module generated it?  Include
the steering file that that caused the problem.

If you know the answer to someone else's question, answer it
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This is a peer-to-peer group, not users-to-'experts'.  If you think
you know the answer, but aren't sure, start your reply with 'I think
...'  Try to avoid giving an incorrect answer in a definitive manner.

Please don't email your questions directly to 'experts'
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The so-called 'experts' need the answers to any questions to be in the
public record as a resource to others having the same problem in the
future.  Make this easy on the 'experts' by posting to the list.

There are (hopefully) many people on these mailing lists that will
have the answer to your question and you might be helping others who
are having the same problem.

The best part is that someone who is awake may answer your question
while you are asleep.  If you converse with one person who is not
online or not answering right away your answer may drag on for days.
That's assuming that that one person could have answered your
question.

Google your error messages.
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Definitely plug the text of your error message into the 'main' google,
and to the one at http://internal.icecube.wisc.edu/google.  Error
messages tend to google well.  If you find something that fixes your
problem, post to one of the lists that the problem still exists and
the answer is to be found (include links).  If you don't find anything
precisely relevant, it can be helpful to included that "I found
something that appears to be related [here]".

Try it out.
^^^^^^^^^^^

Before posting a question asking "Will this work?" or "Can I do
this?", try to answer your own question first by
testing/experimentation before posting.  You may be smarter than you
think.

Use an illustrative subject line.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Don't put in a subject line like "HELP ME!" or "icetray question."
Instead, say something like "StreamError writing TWRMCHitSeriesMap".
 
Don't use meaningless words in the *Subject*

**emergency**
  unless shutting down means losing data it probably isn't.

**Help** 
  everybody with a question is looking for help

**Question**
  almost all threads begin with a question so the word adds nothing

**urgent**
  everybody with a question is looking for help

Use the subject line to properly identify the problem.  Single words
are not adequate.  Misleading subject lines make it difficult to
locate your question again when we can answer it.  It is also
frustrating to answer a question only to see that part of the
description was contained only in the subject line.  So make sure that
the subject line matches the question.  

Many people choose what they read based on the titles of the mails, so
be precise if you want more eyeballs on the problems you post.

If you've struggled with a useless/vague error message, don't let the problem state slip away 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you have encountered a problem and got a bad/incorrect/useless
error message, the most important part of fixing it is getting some
kind of a check in so that the error message is correct in the future.
This benefits everyone and contributes significantly to the long-term
stabilization/reliability of the code.

For this reason, it can be frustrating to hear so "It works now" or
"Jimmy helped me fix it" without having isolated the problem to the
point where it can be accurately reported in the future.  Try to note
exactly what was incorrectly detected/reported so that a fix (and
hopefully a test) can go in.

If you have a compile / build problem, include verbose make output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If your problem appears to be in the build system, be sure to include
the output of your build with verbosity **on**, by adding
``VERBOSE=1`` to the command line::

  % make VERBOSE=1 doxygen
  /usr/local/bin/cmake -H/home/troy/Icecube/meta-projects/offline-software/trunk/clean-docs/src -B/home/troy/Icecube/meta-projects/offline-software/trunk/clean-docs/build --check-build-system CMakeFiles/Makefile.cmake 0
  make -f CMakeFiles/Makefile2 doxygen
  make[1]: Entering directory `/home/troy/Icecube/meta-projects/offline-software/trunk/clean-docs/build'
  /usr/local/bin/cmake -H/home/troy/Icecube/meta-projects/offline-software/trunk/clean-docs/src -B/home/troy/Icecube/meta-projects/offline-software/trunk/clean-docs/build --check-build-system CMakeFiles/Makefile.cmake 0
  /usr/local/bin/cmake -E cmake_progress_start /home/troy/Icecube/meta-projects/offline-software/trunk/clean-docs/build/CMakeFiles 4
  make -f CMakeFiles/Makefile2 CMakeFiles/doxygen.dir/all
  [ etc ]

This way the details of the commands that are executed are available
for diagnosis.  There may be a tremendous amount of output; it might
make sense to include only the bits that are related to the failure.





