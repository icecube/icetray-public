#!/bin/bash

lcov=`which lcov`                     # default lcov location
genhtml=`which genhtml`               # default gehntml location
output="docs/coverage"                # default output directory
#output="../output/`date +%Y-%m-%d`"   # default output directory
J=2                                   # default number of jobs to run, passed to ctest

function show_help() {
    echo "Usage: `basename $0` [OPTIONS]"
    echo ""
    echo "Use `basename $0` to generate per-project coverage reports"
    echo ""
    echo "Misc:"
    echo "  -h                          Print this help, then exit"
    echo "  -v                          Operate verbosely"
    echo ""
    echo "Options:"
    echo "  -j NUM                      Number of concurrent jobs to run, passed to ctest"
    echo "  -o DIR                      Set the output directory"
    echo "                              The default is \"${output}\""
    echo ""
}

## deal with arguments
OPTIND=1
while getopts "h?jvo:" opt; do
    case "$opt" in
	h|\?)
	    show_help
	    exit 0
	    ;;
	j) J=$OPTARG
	   ;;
	v) verbose=1
	   ;;
	o) output=$OPTARG
	   ;;
	*)
	   ;;
    esac
done

shift $((OPTIND-1))
[ "$1" = "--" ] && shift

if [ -z "$1" ]; then
    echo "** Require a project name in order to build a report"
    exit 1
fi
project=${1}

## look for required programs
if [ ! -z ${lcov} -o -x ${lcov} ]; then  
    :
else
    echo "** Can't find \"lcov\". Please ensure it's on your PATH"
    exit 1
fi

if [ ! -z ${genhtml} -o -x ${genhtml} ]; then
    :
else
    echo "** Can't find \"genhtml\". Please ensure it's on your PATH"
    exit 1
fi

## are we in an I3 shell?
if [ -z ${I3_SHELL} ]; then
    echo "** You must run $0 under your workspace's ./env-shell.sh"
    exit 1
fi

## create the output directory
o="`dirname $output`"
if [ ! -d $o ]; then
    mkdir -p "$o"
fi

## zero-out existing counters
${lcov} --base-directory ../ --directory "$project" --zerocounters

## initialize the base capture file
${lcov} -b ../ -d "$project" --capture --initial --output-file test_base.info

## run the test
./env-shell.sh ctest -j${J} -R "$project"::

## collect the counters into a capture file
${lcov} -b ../ -d "$project" --capture -o test_run.info

## combine the pre- and post-test capture files
${lcov} -b ../ -d "$project" --add-tracefile test_base.info -a test_run.info -o test_total.info

## remove stuff we don't care about
${lcov} -b ../ -d "$project" --remove test_total.info '/usr/include/*' '$ENV{I3_PORTS}/*' '*/numpy' '/usr/lib/gcc/*' '*/geant/*' -o reports.info

## generate the html
if [ `which c++filt` ]; then
    ${genhtml} -s -k --sort --demangle-cpp --legend -b test_base.info -o "${output}" reports.info
else
    ${genhtml} -s -k --sort --legend -b test_base.info -o "${output}" reports.info
fi    

## reset the '00_LATEST' symlink
#rm -f ../output/00_LATEST
#ln -sf `ls -1tr ../output |tail -1` ../output/00_LATEST
