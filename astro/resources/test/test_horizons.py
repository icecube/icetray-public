#!/usr/bin/env python
#
# @copyright (C) 2015 The IceCube Collaboration
# 
# @author Kevin Meagher
# @date August 2015


"""
Test against ephemerides generated by JPL's Horizons
http://ssd.jpl.nasa.gov/horizons.cgi
"""
import os
import math
from datetime import datetime
from icecube.icetray import I3Units
from icecube import dataclasses,astro
import unittest

def azimuth_distance(a,b):
    d = abs(a-b)
    return min(d,360-d)

def read_horizons(horizons_filename):
    times = []


    values = dict( date = 'Date__(UT)__HR:MN:SC.fff',
                   jdut = 'Date_________JDUT',
                   az = 'Azi_(a-app)',
                   el = 'Elev_(a-app)',
                   ra = 'R.A._(ICRF/J2000.0)',
                   dec = 'DEC_(ICRF/J2000.0)',
                   l = 'GlxLon',
                   b = 'GlxLat'
    )

    ephem = {}
    for k in values:
        ephem[k] = []
    
    with open(horizons_filename,'U') as csvfile:
        lines = iter(csvfile.readlines())

        for line in lines:
            line = line.strip()
            if len(line) > 80 and line==len(line)*"*":
                break

        header = [ s.strip() for s in next(lines).split(',')]

        indices = {}
        for k,v in values.items():
            indices[k] = header.index(v) 

        line = next(lines).strip()
        assert(len(line) > 80 and line==len(line)*"*")

        line = next(lines).strip()
        assert( line == "$$SOE" )

        for line in lines:

            line = line.strip()
            if line=='$$EOE':
                break

            split = line.split(',')
            
            t = datetime.strptime(split[indices['date']]+"000", '%Y-%b-%d %H:%M:%S.%f')

            for value in values:
                if value =='date':
                    ephem[value].append(t)
                else:
                    ephem[value].append(float(split[indices[value]]))
                    

    return ephem

TEST_DATA = os.path.expandvars("$I3_BUILD/astro/resources/test/")

class HorizonsTest(unittest.TestCase):
    def compare_file(self,hor_file,obj):
    
        hor = read_horizons(hor_file)
        
        for i,date in enumerate(hor['date']):
            t = dataclasses.make_I3Time(date)
            if obj=='sun':
                d = astro.I3GetSunDirection(t)
            elif obj=='moon':
                d = astro.I3GetMoonDirection(t)
            el = 90-math.degrees(d.zenith)
            az = (90-math.degrees(d.azimuth+astro.ICECUBE_LONGITUDE))%360.
            
            eq = astro.I3GetEquatorialFromDirection(d,t)
            
            ra = math.degrees(eq.ra)
            dec = math.degrees(eq.dec)
            
            gal =  astro.I3GetGalacticFromEquatorial(eq)

            l = math.degrees(gal.l)
            b = math.degrees(gal.b)

            #print el - hor['el'][i], az - hor['az'][i], ra - hor['ra'][i], dec - hor['dec'][i],l - hor['l'][i],b -hor['b'][i]

            assert(abs(el-hor['el'][i]) < 0.003)
            assert(azimuth_distance(az,hor['az'][i]) < 1.0)
            assert(abs(ra-hor['ra'][i]) < 0.01)
            assert(abs(dec-hor['dec'][i]) < 0.004)
            assert(abs(l-hor['l'][i]) < 0.02)
            assert(abs(b-hor['b'][i]) < 0.01)

    def test_sun_1dy(self):
        self.compare_file(TEST_DATA + 'horizons_sun_1dy.txt','sun')
        
    def test_sun_1yr(self):
        self.compare_file(TEST_DATA + 'horizons_sun_1yr.txt','sun')
        
    def test_sun_30yr(self):
        self.compare_file(TEST_DATA + 'horizons_sun_30yr.txt','sun')

    def test_moon_1dy(self):
        self.compare_file(TEST_DATA + 'horizons_moon_1dy.txt','moon')

    def test_moon_1yr(self):
        self.compare_file(TEST_DATA + 'horizons_moon_1yr.txt','moon')

    def test_moon_30yr(self):
        self.compare_file(TEST_DATA + 'horizons_moon_30yr.txt','moon')

        
if __name__=="__main__":
    unittest.main()
    

